{"version":3,"file":"formik.cjs.production.js","sources":["../src/connect.tsx","../src/utils.ts","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/FieldArray.tsx","../src/FastField.tsx","../src/ErrorMessage.tsx","../src/withFormik.tsx"],"sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport createContext from 'create-react-context';\nimport { FormikContext } from './types';\n\nexport const {\n  Provider: FormikProvider,\n  Consumer: FormikConsumer,\n} = createContext<FormikContext<any>>({} as any);\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics<\n    OuterProps,\n    OuterProps & { formik: FormikContext<Values> }\n  >(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via its path.\n * @see https://github.com/developit/linkstate\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = {};\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  const result = { ...obj, ...res };\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete result[pathArray[i]];\n  }\n\n  return result;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport { FormikProvider } from './connect';\nimport warning from 'tiny-warning';\nimport get from 'lodash/get';\nimport {\n  FormikActions,\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n} from './types';\nimport {\n  isEmptyChildren,\n  isFunction,\n  isNaN,\n  isPromise,\n  isString,\n  isInputEvent,\n  setIn,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  makeCancelable,\n} from './utils';\n\nexport class Formik<Values = FormikValues> extends React.Component<\n  FormikConfig<Values>,\n  FormikState<Values>\n> {\n  static defaultProps = {\n    validateOnChange: true,\n    validateOnBlur: true,\n    isInitialValid: false,\n    enableReinitialize: false,\n  };\n\n  initialValues: Values;\n  initialErrors: FormikErrors<Values>;\n  didMount: boolean;\n  hcCache: {\n    [key: string]: (e: unknown | React.ChangeEvent<any>) => void;\n  } = {};\n  hbCache: {\n    [key: string]: (e: any) => void;\n  } = {};\n  fields: {\n    [field: string]: React.Component<any>;\n  };\n  validator: any;\n\n  constructor(props: FormikConfig<Values>) {\n    super(props);\n    this.state = {\n      values: props.initialValues || ({} as any),\n      errors: props.initialErrors || ({} as any),\n      touched: {},\n      isSubmitting: false,\n      isValidating: false,\n      submitCount: 0,\n      status: props.initialStatus,\n    };\n    this.didMount = false;\n    this.fields = {};\n    this.initialValues = props.initialValues || ({} as any);\n    this.initialErrors = props.initialErrors || ({} as any);\n    warning(\n      !(props.component && props.render),\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\n    );\n\n    warning(\n      !(props.component && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n\n    warning(\n      !(props.render && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n  }\n\n  registerField = (name: string, Comp: React.Component<any>) => {\n    this.fields[name] = Comp;\n  };\n\n  unregisterField = (name: string) => {\n    delete this.fields[name];\n  };\n\n  componentDidMount() {\n    this.didMount = true;\n  }\n\n  componentWillUnmount() {\n    // This allows us to prevent setting state on an\n    // unmounted component. This can occur if Formik is in a modal, and submission\n    // toggles show/hide, and validation of a blur field takes longer than validation\n    // before a submit.\n    // @see https://github.com/jaredpalmer/formik/issues/597\n    // @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n    this.didMount = false;\n\n    // Cancel validation on unmount.\n    if (this.validator) {\n      this.validator();\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<FormikConfig<Values>>) {\n    // If the initialValues change, reset the form\n    if (\n      this.props.enableReinitialize &&\n      !isEqual(prevProps.initialValues, this.props.initialValues)\n    ) {\n      this.initialValues = this.props.initialValues;\n      // @todo refactor to use getDerivedStateFromProps?\n      this.resetForm();\n    }\n  }\n\n  setErrors = (errors: FormikErrors<Values>) => {\n    this.setState({ errors });\n  };\n\n  setTouched = (touched: FormikTouched<Values>) => {\n    this.setState({ touched }, () => {\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    });\n  };\n\n  setValues = (values: FormikState<Values>['values']) => {\n    this.setState({ values }, () => {\n      if (this.props.validateOnChange) {\n        this.runValidations(values);\n      }\n    });\n  };\n\n  setStatus = (status?: any) => {\n    this.setState({ status });\n  };\n\n  setError = (error: any) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\n      );\n    }\n    this.setState({ error });\n  };\n\n  setSubmitting = (isSubmitting: boolean) => {\n    if (this.didMount) {\n      this.setState({ isSubmitting });\n    }\n  };\n\n  /**\n   * Run field level validation\n   */\n  validateField = (field: string): Promise<Object> => {\n    this.setState({ isValidating: true });\n    return this.runSingleFieldLevelValidation(\n      field,\n      getIn(this.state.values, field)\n    ).then(error => {\n      if (this.didMount) {\n        this.setState({\n          errors: setIn(this.state.errors, field, error),\n          isValidating: false,\n        });\n      }\n      return error;\n    });\n  };\n\n  runSingleFieldLevelValidation = (\n    field: string,\n    value: void | string\n  ): Promise<string> => {\n    return new Promise(resolve =>\n      resolve(this.fields[field].props.validate(value))\n    ).then(x => x, e => e);\n  };\n\n  runFieldLevelValidations(\n    values: FormikValues\n  ): Promise<FormikErrors<Values>> {\n    const fieldKeysWithValidation: string[] = Object.keys(this.fields).filter(\n      f =>\n        this.fields &&\n        this.fields[f] &&\n        this.fields[f].props.validate &&\n        isFunction(this.fields[f].props.validate)\n    );\n\n    // Construct an array with all of the field validation functions\n    const fieldValidations: Promise<string>[] =\n      fieldKeysWithValidation.length > 0\n        ? fieldKeysWithValidation.map(f =>\n            this.runSingleFieldLevelValidation(f, getIn(values, f))\n          )\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n      fieldErrorsList.reduce(\n        (prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (!!curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        },\n        {} as FormikErrors<Values>\n      )\n    );\n  }\n\n  runValidateHandler(values: FormikValues): Promise<FormikErrors<Values>> {\n    return new Promise(resolve => {\n      const maybePromisedErrors = (this.props.validate as any)(values);\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            resolve({});\n          },\n          errors => {\n            resolve(errors);\n          }\n        );\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  runValidationSchema = (values: FormikValues) => {\n    return new Promise(resolve => {\n      const { validationSchema } = this.props;\n      const schema = isFunction(validationSchema)\n        ? validationSchema()\n        : validationSchema;\n      validateYupSchema(values, schema).then(\n        () => {\n          resolve({});\n        },\n        (err: any) => {\n          resolve(yupToFormErrors(err));\n        }\n      );\n    });\n  };\n\n  /**\n   * Run all validations methods and update state accordingly\n   */\n  runValidations = (\n    values: FormikValues = this.state.values\n  ): Promise<FormikErrors<Values>> => {\n    if (this.validator) {\n      this.validator();\n    }\n\n    const [promise, cancel] = makeCancelable(\n      Promise.all([\n        this.runFieldLevelValidations(values),\n        this.props.validationSchema ? this.runValidationSchema(values) : {},\n        this.props.validate ? this.runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, handlerErrors]) => {\n        return deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, handlerErrors],\n          { arrayMerge }\n        );\n      })\n    );\n    this.validator = cancel;\n    return promise\n      .then((errors: FormikErrors<Values>) => {\n        if (this.didMount) {\n          this.setState(prevState => {\n            if (!isEqual(prevState.errors, errors)) {\n              return { errors };\n            }\n            return null; // abort the update\n          });\n        }\n        return errors;\n      })\n      .catch(x => x);\n  };\n\n  handleChange = (\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrValue: unknown | React.ChangeEvent<any>) => void) => {\n    // this function actually handles the change\n    const executeChange = (\n      eventOrValue: unknown | React.ChangeEvent<any>,\n      maybePath?: string\n    ) => {\n      // To allow using handleChange with React Native (Web) or other UI libraries, we\n      // allow for the first argument to be either a value or the standard change event.\n      let field = maybePath;\n      let value: unknown;\n      if (isInputEvent(eventOrValue)) {\n        const event = eventOrValue as React.ChangeEvent<any>;\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\n        if (event.persist) {\n          event.persist();\n        }\n        const { type, name, id, checked, outerHTML } = event.target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        value = event.target.value;\n        if (/number|range/.test(type)) {\n          const parsed = parseFloat(event.target.value);\n          value = isNaN(parsed) ? '' : parsed;\n        }\n        if (/checkbox/.test(type)) {\n          value = checked;\n        }\n      } else {\n        value = eventOrValue;\n      }\n\n      if (field) {\n        // Set form fields by name\n        this.setState(\n          prevState => ({\n            ...prevState,\n            values: setIn(prevState.values, field!, value),\n          }),\n          () => {\n            if (this.props.validateOnChange) {\n              this.runValidations(setIn(this.state.values, field!, value));\n            }\n          }\n        );\n      }\n    };\n\n    // Actually execute logic above....\n    if (isString(eventOrPath)) {\n      const path = eventOrPath;\n      // cache these handlers by key like Preact's linkState does for perf boost\n      if (!isFunction(this.hcCache[path])) {\n        // set a new handle function in cache\n        this.hcCache[path] = (eventOrValue: unknown | React.ChangeEvent<any>) =>\n          executeChange(eventOrValue, path);\n      }\n      return this.hcCache[path]; // return the cached function\n    } else {\n      const event = eventOrPath;\n      executeChange(event);\n    }\n  };\n\n  setFieldValue = (\n    field: string,\n    value: any,\n    shouldValidate: boolean = true\n  ) => {\n    if (this.didMount) {\n      // Set form field by name\n      this.setState(\n        prevState => ({\n          ...prevState,\n          values: setIn(prevState.values, field, value),\n        }),\n        () => {\n          if (this.props.validateOnChange && shouldValidate) {\n            this.runValidations(this.state.values);\n          }\n        }\n      );\n    }\n  };\n\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof document !== 'undefined'\n    ) {\n      // Safely get the active element (works with IE)\n      const activeElement = getActiveElement();\n      if (\n        activeElement !== null &&\n        activeElement instanceof HTMLButtonElement\n      ) {\n        warning(\n          !!(\n            activeElement.attributes &&\n            activeElement.attributes.getNamedItem('type')\n          ),\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n        );\n      }\n    }\n\n    this.submitForm();\n  };\n\n  submitForm = () => {\n    // Recursively set all values to `true`.\n    this.setState(prevState => ({\n      touched: setNestedObjectValues<FormikTouched<Values>>(\n        prevState.values,\n        true\n      ),\n      isSubmitting: true,\n      isValidating: true,\n      submitCount: prevState.submitCount + 1,\n    }));\n\n    return this.runValidations(this.state.values).then(combinedErrors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      const isValid = Object.keys(combinedErrors).length === 0;\n      if (isValid) {\n        this.executeSubmit();\n      } else if (this.didMount) {\n        // ^^^ Make sure Formik is still mounted before calling setState\n        this.setState({ isSubmitting: false });\n      }\n    });\n  };\n\n  executeSubmit = () => {\n    this.props.onSubmit(this.state.values, this.getFormikActions());\n  };\n\n  handleBlur = (\n    eventOrPath: string | React.FocusEvent<any>\n  ): void | ((e?: React.FocusEvent<any>) => void) => {\n    const executeBlur = (\n      maybeEvent?: React.FocusEvent<any>,\n      maybePath?: string\n    ) => {\n      let field = maybePath;\n      if (isInputEvent(maybeEvent)) {\n        const event = maybeEvent as React.FocusEvent<any>;\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\n        if (event.persist) {\n          event.persist();\n        }\n        const { name, id, outerHTML } = event.target;\n        field = name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handleblur-e-reactfocuseventany--void',\n            handlerName: 'handleBlur',\n          });\n        }\n      }\n\n      this.setState(prevState => ({\n        touched: setIn(prevState.touched, field!, true),\n      }));\n\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values).then(combinedErrors => {\n          if (this.props.onBlur && field) {\n            this.props.onBlur(field, !get(combinedErrors, field));\n          }\n        });\n      }\n    };\n    if (isString(eventOrPath)) {\n      const path = eventOrPath;\n      // cache these handlers by key like Preact's linkState does for perf boost\n      if (!isFunction(this.hbCache[path])) {\n        // set a new handle function in cache\n        this.hbCache[path] = (event?: React.FocusEvent<any>) =>\n          executeBlur(event, path);\n      }\n      return this.hbCache[path]; // return the cached function\n    } else {\n      const event = eventOrPath;\n      executeBlur(event);\n    }\n  };\n\n  setFieldTouched = (\n    field: string,\n    touched: boolean = true,\n    shouldValidate: boolean = true\n  ) => {\n    // Set touched field by name\n    this.setState(\n      prevState => ({\n        ...prevState,\n        touched: setIn(prevState.touched, field, touched),\n      }),\n      () => {\n        if (this.props.validateOnBlur && shouldValidate) {\n          this.runValidations(this.state.values);\n        }\n      }\n    );\n  };\n\n  setFieldError = (field: string, message: string | undefined) => {\n    // Set form field by name\n    this.setState(prevState => ({\n      ...prevState,\n      errors: setIn(prevState.errors, field, message),\n    }));\n  };\n\n  resetForm = (nextState?: FormikState<Values>) => {\n    const values =\n      nextState && nextState.values\n        ? nextState.values\n        : this.props.initialValues;\n    const errors =\n      nextState && nextState.errors\n        ? nextState.errors\n        : this.props.initialErrors || {};\n\n    this.initialValues = values;\n    this.initialErrors = errors;\n\n    this.setState({\n      isSubmitting: false,\n      isValidating: false,\n      errors,\n      touched: {},\n      error: undefined,\n      status: this.props.initialStatus,\n      values,\n      submitCount: 0,\n    });\n  };\n\n  handleReset = () => {\n    if (this.props.onReset) {\n      const maybePromisedOnReset = (this.props.onReset as any)(\n        this.state.values,\n        this.getFormikActions()\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\n      } else {\n        this.resetForm();\n      }\n    } else {\n      this.resetForm();\n    }\n  };\n\n  setFormikState = (s: any, callback?: (() => void)) =>\n    this.setState(s, callback);\n\n  validateForm = (values: Values) => {\n    this.setState({ isValidating: true });\n    return this.runValidations(values).then(errors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      return errors;\n    });\n  };\n\n  getFormikActions = (): FormikActions<Values> => {\n    return {\n      resetForm: this.resetForm,\n      submitForm: this.submitForm,\n      validateForm: this.validateForm,\n      validateField: this.validateField,\n      setError: this.setError,\n      setErrors: this.setErrors,\n      setFieldError: this.setFieldError,\n      setFieldTouched: this.setFieldTouched,\n      setFieldValue: this.setFieldValue,\n      setStatus: this.setStatus,\n      setSubmitting: this.setSubmitting,\n      setTouched: this.setTouched,\n      setValues: this.setValues,\n      setFormikState: this.setFormikState,\n    };\n  };\n\n  getFormikComputedProps = () => {\n    const { isInitialValid } = this.props;\n    const dirty = !isEqual(this.initialValues, this.state.values);\n    return {\n      dirty,\n      isValid: dirty\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\n          : (isInitialValid as boolean),\n      initialValues: this.initialValues,\n      initialErrors: this.initialErrors,\n    };\n  };\n\n  getFormikBag = () => {\n    return {\n      ...this.state,\n      ...this.getFormikActions(),\n      ...this.getFormikComputedProps(),\n      // Field needs to communicate with Formik during resets\n      registerField: this.registerField,\n      unregisterField: this.unregisterField,\n      handleBlur: this.handleBlur,\n      handleChange: this.handleChange,\n      handleReset: this.handleReset,\n      handleSubmit: this.handleSubmit,\n      validateOnChange: this.props.validateOnChange,\n      validateOnBlur: this.props.validateOnBlur,\n    };\n  };\n\n  getFormikContext = () => {\n    return {\n      ...this.getFormikBag(),\n      validationSchema: this.props.validationSchema,\n      validate: this.props.validate,\n      initialValues: this.initialValues,\n    };\n  };\n\n  render() {\n    const { component, render, children } = this.props;\n    const props = this.getFormikBag();\n    const ctx = this.getFormikContext();\n    return (\n      <FormikProvider value={ctx}>\n        {component\n          ? React.createElement(component as any, props)\n          : render\n            ? render(props)\n            : children // children come last, always called\n              ? isFunction(children)\n                ? (children as ((\n                    props: FormikProps<Values>\n                  ) => React.ReactNode))(props as FormikProps<Values>)\n                : !isEmptyChildren(children)\n                  ? React.Children.only(children)\n                  : null\n              : null}\n      </FormikProvider>\n    );\n  }\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n\n    ${htmlContent}\n\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n","import * as React from 'react';\n\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n  FormikHandlers,\n} from './types';\nimport warning from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\n/**\n * Note: These typings could be more restrictive, but then it would limit the\n * reusability of custom <Field/> components.\n *\n * @example\n * interface MyProps {\n *   ...\n * }\n *\n * export const MyInput: React.SFC<MyProps & FieldProps> = ({\n *   field,\n *   form,\n *   ...props\n * }) =>\n *   <div>\n *     <input {...field} {...props}/>\n *     {form.touched[field.name] && form.errors[field.name]}\n *   </div>\n */\nexport interface FieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: FormikHandlers['handleChange'];\n    /** Mark input as touched */\n    onBlur: FormikHandlers['handleBlur'];\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FieldInner<Values = {}, Props = {}> extends React.Component<\n  FieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n    );\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, this);\n  }\n\n  componentDidUpdate(\n    prevProps: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      ...props\n    } = (this.props as FieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const Field = connect<FieldAttributes<any>, any>(FieldInner);\n","import * as React from 'react';\nimport { connect } from './connect';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\nexport const Form = connect<FormikFormProps>(\n  ({ formik: { handleReset, handleSubmit }, ...props }) => (\n    <form onReset={handleReset} onSubmit={handleSubmit} {...props} />\n  )\n);\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\n\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n} from './types';\nimport warning from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\nexport interface FastFieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: (e: React.ChangeEvent<any>) => void;\n    /** Mark input as touched */\n    onBlur: (e: any) => void;\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FastFieldConfig<T> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FastFieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FastFieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?:\n    | ((props: FastFieldProps<any>) => React.ReactNode)\n    | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes & { formik: FormikContext<any> },\n    props: {}\n  ) => boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML class */\n  className?: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      getIn(this.props.formik.values, this.props.name) !==\n        getIn(props.formik.values, this.props.name) ||\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      this.props.formik.isSubmitting !== props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, this);\n  }\n\n  componentDidUpdate(\n    prevProps: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      shouldUpdate,\n      ...props\n    } = (this.props as FastFieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikActions,\n  FormikErrors,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikActions<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form errors\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikActions<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics<OuterProps, OuterProps & FormikProps<Values>>(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["FormikProvider","FormikConsumer","connect","Comp","C","props","React.createElement","formik","componentDisplayName","displayName","name","constructor","WrappedComponent","hoistNonReactStatics","getIn","obj","key","def","p","path","toPath","length","undefined","setIn","value","res","resVal","i","pathArray","currentPath","currentObj","slice","cloneDeep","nextPath","isInteger","Number","result","setNestedObjectValues","object","visited","response","WeakMap","_a","Object","keys","_i","k","val","isObject","get","set","Array","isArray","isFunction","String","Math","floor","isString","prototype","toString","call","isNaN","isEmptyChildren","children","React.Children","count","isPromise","then","isInputEvent","target","makeCancelable","promise","hasCanceled","Promise","resolve","reject","isCanceled","error","_super","_this","fields","errors","setState","touched","validateOnBlur","runValidations","state","values","validateOnChange","status","isSubmitting","didMount","field","isValidating","runSingleFieldLevelValidation","validate","x","e","validationSchema","schema","validateYupSchema","err","yupToFormErrors","validator","prevState","isEqual","catch","eventOrPath","executeChange","eventOrValue","maybePath","event_1","persist","type","name_1","checked","test","parsed","parseFloat","path_1","hcCache","shouldValidate","preventDefault","submitForm","submitCount","combinedErrors","executeSubmit","onSubmit","getFormikActions","executeBlur","maybeEvent","event_3","name_2","onBlur","path_2","hbCache","event","message","nextState","initialValues","initialErrors","initialStatus","onReset","maybePromisedOnReset","resetForm","s","callback","validateForm","validateField","setError","setErrors","setFieldError","setFieldTouched","setFieldValue","setStatus","setSubmitting","setTouched","setValues","setFormikState","isInitialValid","dirty","isValid","getFormikComputedProps","registerField","unregisterField","handleBlur","handleChange","handleReset","handleSubmit","getFormikBag","warning","component","render","tslib_1.__extends","Formik","this","prevProps","enableReinitialize","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","reduce","prev","curr","index","maybePromisedErrors","ctx","getFormikContext","only","React.Component","yupError","inner","sync","context","validateData","hasOwnProperty","abortEarly","arrayMerge","source","options","destination","forEach","shouldClone","clone","isMergeableObject","deepmerge","indexOf","push","Field","FieldInner","_b","restOfFormik","onChange","bag","form","innerRef","rest","ref","Form","move","array","from","to","copy","splice","swap","indexA","indexB","a","insert","replace","FieldArray","fn","alterTouched","alterErrors","updateErrors","updateTouched","updateArrayField","arr","unshift","remove","pop","bind","FieldArrayInner","tmp","arrayHelpers","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","FastField","FastFieldInner","shouldUpdate","ErrorMessage","ErrorMessageImpl","touch","doc","document","activeElement","body","mapPropsToValues","config","Component","actions","formikProps","mapPropsToStatus","mapPropsToErrors","renderFormComponent"],"mappings":"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"}
